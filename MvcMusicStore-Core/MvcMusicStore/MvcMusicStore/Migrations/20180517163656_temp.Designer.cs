// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicStore.Models;

namespace MusicStore.Migrations
{
    [DbContext(typeof(MusicStoreDBContext))]
    [Migration("20180517163656_temp")]
    partial class temp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rc1-32029");

            modelBuilder.Entity("MvcMusicStore.Models.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlbumArtUrl")
                        .HasMaxLength(1024);

                    b.Property<int>("ArtistId");

                    b.Property<int>("GenreId");

                    b.Property<decimal>("Price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(160);

                    b.HasKey("AlbumId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("GenreId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("MvcMusicStore.Models.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");

                    b.HasData(
                        new { ArtistId = 1, Name = "Aaron Copland & London Symphony Orchestra" },
                        new { ArtistId = 2, Name = "Aaron Goldberg" },
                        new { ArtistId = 3, Name = "AC/DC" },
                        new { ArtistId = 4, Name = "Accept" },
                        new { ArtistId = 5, Name = "Adrian Leaper & Doreen de Feis" },
                        new { ArtistId = 6, Name = "Aerosmith" },
                        new { ArtistId = 7, Name = "Aisha Duo" },
                        new { ArtistId = 8, Name = "Alanis Morissette" },
                        new { ArtistId = 9, Name = "Alberto Turco & Nova Schola Gregoriana" },
                        new { ArtistId = 10, Name = "Alice In Chains" },
                        new { ArtistId = 11, Name = "Amy Winehouse" },
                        new { ArtistId = 12, Name = "Anita Ward" },
                        new { ArtistId = 13, Name = "Antônio Carlos Jobim" },
                        new { ArtistId = 14, Name = "Apocalyptica" },
                        new { ArtistId = 15, Name = "Audioslave" },
                        new { ArtistId = 16, Name = "Barry Wordsworth & BBC Concert Orchestra" },
                        new { ArtistId = 17, Name = "Berliner Philharmoniker & Hans Rosbaud" },
                        new { ArtistId = 18, Name = "Berliner Philharmoniker & Herbert Von Karajan" },
                        new { ArtistId = 19, Name = "Billy Cobham" },
                        new { ArtistId = 20, Name = "Black Label Society" },
                        new { ArtistId = 21, Name = "Black Sabbath" },
                        new { ArtistId = 22, Name = "Boston Symphony Orchestra & Seiji Ozawa" },
                        new { ArtistId = 23, Name = "Britten Sinfonia, Ivor Bolton & Lesley Garrett" },
                        new { ArtistId = 24, Name = "Bruce Dickinson" },
                        new { ArtistId = 25, Name = "Buddy Guy" },
                        new { ArtistId = 26, Name = "Caetano Veloso" },
                        new { ArtistId = 27, Name = "Cake" },
                        new { ArtistId = 28, Name = "Calexico" },
                        new { ArtistId = 29, Name = "Cássia Eller" },
                        new { ArtistId = 30, Name = "Chic" },
                        new { ArtistId = 31, Name = "Chicago Symphony Orchestra & Fritz Reiner" },
                        new { ArtistId = 32, Name = "Chico Buarque" },
                        new { ArtistId = 33, Name = "Chico Science & Nação Zumbi" },
                        new { ArtistId = 34, Name = "Choir Of Westminster Abbey & Simon Preston" },
                        new { ArtistId = 35, Name = "Chris Cornell" },
                        new { ArtistId = 36, Name = "Christopher O'Riley" },
                        new { ArtistId = 37, Name = "Cidade Negra" },
                        new { ArtistId = 38, Name = "Cláudio Zoli" },
                        new { ArtistId = 39, Name = "Creedence Clearwater Revival" },
                        new { ArtistId = 40, Name = "David Coverdale" },
                        new { ArtistId = 41, Name = "Deep Purple" },
                        new { ArtistId = 42, Name = "Dennis Chambers" },
                        new { ArtistId = 43, Name = "Djavan" },
                        new { ArtistId = 44, Name = "Donna Summer" },
                        new { ArtistId = 45, Name = "Dread Zeppelin" },
                        new { ArtistId = 46, Name = "Ed Motta" },
                        new { ArtistId = 47, Name = "Edo de Waart & San Francisco Symphony" },
                        new { ArtistId = 48, Name = "Elis Regina" },
                        new { ArtistId = 49, Name = "English Concert & Trevor Pinnock" },
                        new { ArtistId = 50, Name = "Eric Clapton" },
                        new { ArtistId = 51, Name = "Eugene Ormandy" },
                        new { ArtistId = 52, Name = "Faith No More" },
                        new { ArtistId = 53, Name = "Falamansa" },
                        new { ArtistId = 54, Name = "Foo Fighters" },
                        new { ArtistId = 55, Name = "Frank Zappa & Captain Beefheart" },
                        new { ArtistId = 56, Name = "Fretwork" },
                        new { ArtistId = 57, Name = "Funk Como Le Gusta" },
                        new { ArtistId = 58, Name = "Gerald Moore" },
                        new { ArtistId = 59, Name = "Gilberto Gil" },
                        new { ArtistId = 60, Name = "Godsmack" },
                        new { ArtistId = 61, Name = "Gonzaguinha" },
                        new { ArtistId = 62, Name = "Göteborgs Symfoniker & Neeme Järvi" },
                        new { ArtistId = 63, Name = "Guns N' Roses" },
                        new { ArtistId = 64, Name = "Gustav Mahler" },
                        new { ArtistId = 65, Name = "Incognito" },
                        new { ArtistId = 66, Name = "Iron Maiden" },
                        new { ArtistId = 67, Name = "James Levine" },
                        new { ArtistId = 68, Name = "Jamiroquai" },
                        new { ArtistId = 69, Name = "Jimi Hendrix" },
                        new { ArtistId = 70, Name = "Joe Satriani" },
                        new { ArtistId = 71, Name = "Jorge Ben" },
                        new { ArtistId = 72, Name = "Jota Quest" },
                        new { ArtistId = 73, Name = "Judas Priest" },
                        new { ArtistId = 74, Name = "Julian Bream" },
                        new { ArtistId = 75, Name = "Kent Nagano and Orchestre de l'Opéra de Lyon" },
                        new { ArtistId = 76, Name = "Kiss" },
                        new { ArtistId = 77, Name = "Led Zeppelin" },
                        new { ArtistId = 78, Name = "Legião Urbana" },
                        new { ArtistId = 79, Name = "Lenny Kravitz" },
                        new { ArtistId = 80, Name = "Les Arts Florissants & William Christie" },
                        new { ArtistId = 81, Name = "London Symphony Orchestra & Sir Charles Mackerras" },
                        new { ArtistId = 82, Name = "Luciana Souza/Romero Lubambo" },
                        new { ArtistId = 83, Name = "Lulu Santos" },
                        new { ArtistId = 84, Name = "Marcos Valle" },
                        new { ArtistId = 85, Name = "Marillion" },
                        new { ArtistId = 86, Name = "Marisa Monte" },
                        new { ArtistId = 87, Name = "Martin Roscoe" },
                        new { ArtistId = 88, Name = "Maurizio Pollini" },
                        new { ArtistId = 89, Name = "Mela Tenenbaum, Pro Musica Prague & Richard Kapp" },
                        new { ArtistId = 90, Name = "Men At Work" },
                        new { ArtistId = 91, Name = "Metallica" },
                        new { ArtistId = 92, Name = "Michael Tilson Thomas & San Francisco Symphony" },
                        new { ArtistId = 93, Name = "Miles Davis" },
                        new { ArtistId = 94, Name = "Milton Nascimento" },
                        new { ArtistId = 95, Name = "Mötley Crüe" },
                        new { ArtistId = 96, Name = "Motörhead" },
                        new { ArtistId = 97, Name = "Nash Ensemble" },
                        new { ArtistId = 98, Name = "Nicolaus Esterhazy Sinfonia" },
                        new { ArtistId = 99, Name = "Nirvana" },
                        new { ArtistId = 100, Name = "O Terço" },
                        new { ArtistId = 101, Name = "Olodum" },
                        new { ArtistId = 102, Name = "Orchestra of The Age of Enlightenment" },
                        new { ArtistId = 103, Name = "Os Paralamas Do Sucesso" },
                        new { ArtistId = 104, Name = "Ozzy Osbourne" },
                        new { ArtistId = 105, Name = "Page & Plant" },
                        new { ArtistId = 106, Name = "Paul D'Ianno" },
                        new { ArtistId = 107, Name = "Pearl Jam" },
                        new { ArtistId = 108, Name = "Pink Floyd" },
                        new { ArtistId = 109, Name = "Queen" },
                        new { ArtistId = 110, Name = "R.E.M." },
                        new { ArtistId = 111, Name = "Raul Seixas" },
                        new { ArtistId = 112, Name = "Red Hot Chili Peppers" },
                        new { ArtistId = 113, Name = "Roger Norrington, London Classical Players" },
                        new { ArtistId = 114, Name = "Royal Philharmonic Orchestra & Sir Thomas Beecham" },
                        new { ArtistId = 115, Name = "Rush" },
                        new { ArtistId = 116, Name = "Santana" },
                        new { ArtistId = 117, Name = "Scholars Baroque Ensemble" },
                        new { ArtistId = 118, Name = "Scorpions" },
                        new { ArtistId = 119, Name = "Sergei Prokofiev & Yuri Temirkanov" },
                        new { ArtistId = 120, Name = "Sir Georg Solti & Wiener Philharmoniker" },
                        new { ArtistId = 121, Name = "Skank" },
                        new { ArtistId = 122, Name = "Soundgarden" },
                        new { ArtistId = 123, Name = "Spyro Gyra" },
                        new { ArtistId = 124, Name = "Stevie Ray Vaughan & Double Trouble" },
                        new { ArtistId = 125, Name = "Stone Temple Pilots" },
                        new { ArtistId = 126, Name = "System Of A Down" },
                        new { ArtistId = 127, Name = "Temple of the Dog" },
                        new { ArtistId = 128, Name = "Terry Bozzio, Tony Levin & Steve Stevens" },
                        new { ArtistId = 129, Name = "The 12 Cellists of The Berlin Philharmonic" },
                        new { ArtistId = 130, Name = "The Black Crowes" },
                        new { ArtistId = 131, Name = "The Cult" },
                        new { ArtistId = 132, Name = "The Doors" },
                        new { ArtistId = 133, Name = "The King's Singers" },
                        new { ArtistId = 134, Name = "The Police" },
                        new { ArtistId = 135, Name = "The Posies" },
                        new { ArtistId = 136, Name = "The Rolling Stones" },
                        new { ArtistId = 137, Name = "The Who" },
                        new { ArtistId = 138, Name = "Tim Maia" },
                        new { ArtistId = 139, Name = "Ton Koopman" },
                        new { ArtistId = 140, Name = "U2" },
                        new { ArtistId = 141, Name = "UB40" },
                        new { ArtistId = 142, Name = "Van Halen" },
                        new { ArtistId = 143, Name = "Various Artists" },
                        new { ArtistId = 144, Name = "Velvet Revolver" },
                        new { ArtistId = 145, Name = "Vinícius De Moraes" },
                        new { ArtistId = 146, Name = "Wilhelm Kempff" },
                        new { ArtistId = 147, Name = "Yehudi Menuhin" },
                        new { ArtistId = 148, Name = "Yo-Yo Ma" }
                    );
                });

            modelBuilder.Entity("MvcMusicStore.Models.Cart", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AlbumId");

                    b.Property<string>("CartId");

                    b.Property<int>("Count");

                    b.Property<DateTime>("DateCreated");

                    b.HasKey("RecordId");

                    b.HasIndex("AlbumId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("MvcMusicStore.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new { GenreId = 1, Name = "Rock" },
                        new { GenreId = 2, Name = "Jazz" },
                        new { GenreId = 3, Name = "Metal" },
                        new { GenreId = 4, Name = "Alternative" },
                        new { GenreId = 5, Name = "Disco" },
                        new { GenreId = 6, Name = "Blues" },
                        new { GenreId = 7, Name = "Latin" },
                        new { GenreId = 8, Name = "Reggae" },
                        new { GenreId = 9, Name = "Pop" },
                        new { GenreId = 10, Name = "Classical" }
                    );
                });

            modelBuilder.Entity("MvcMusicStore.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(160);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(160);

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(24);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<decimal>("Total");

                    b.Property<string>("Username");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MvcMusicStore.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AlbumId");

                    b.Property<int>("OrderId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("MvcMusicStore.Models.Album", b =>
                {
                    b.HasOne("MvcMusicStore.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MvcMusicStore.Models.Genre", "Genre")
                        .WithMany("Albums")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MvcMusicStore.Models.Cart", b =>
                {
                    b.HasOne("MvcMusicStore.Models.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MvcMusicStore.Models.OrderDetail", b =>
                {
                    b.HasOne("MvcMusicStore.Models.Album", "Album")
                        .WithMany("OrderDetails")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MvcMusicStore.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
